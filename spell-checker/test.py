#############################################################################
### Търсене и извличане на информация. Приложение на дълбоко машинно обучение
### Стоян Михов
### Зимен семестър 2022/2023
#############################################################################

import model
import nltk
import a1
from nltk.corpus import PlaintextCorpusReader

#############################################################################
#### Начало на тестовете
#### ВНИМАНИЕ! Тези тестове са повърхностни и тяхното успешно преминаване е само предпоставка за приемането, но не означава задължително, че програмата Ви ще бъде приета. За приемане на заданието Вашата програма ще бъде подложена на по-задълбочена серия тестове.
#############################################################################

L1 = ['заявката','заявката','заявката','заявката','заявката','заявката']
L2 = ['заявката','язвката','заявьата','завякатва','заявкатаа','вя']
C = [0,2,1,3,1,6]
D = [0.0,6.0,2.5,8.0,3.0,18.5]

#### Тест на editDistance
for s1,s2,d in zip(L1,L2,C):
    assert a1.editDistance(s1,s2) == d, "Разстоянието между '{}' и '{}' следва да е '{}'".format(s1,s2,d)
print("Функцията editDistance премина теста.")

#### Тест на editWeight
for s1,s2,d in zip(L1,L2,D):
    assert a1.editWeight(s1,s2) == d, "Теглото между '{}' и '{}' следва да е '{}'".format(s1,s2,d)
print("Функцията editWeight премина теста.")

#### Тест на generate_edits
assert len(set(a1.generateEdits("тест"))-set(["тест"])) == 4218, "Броят на елементарните редакции \"тест\"  следва да е 4218"
print("Функцията generateEdits премина теста.")

print('Прочитане на корпуса от текстове...')
corpus_root = 'JOURNALISM.BG/C-MassMedia'
myCorpus = PlaintextCorpusReader(corpus_root, '.*\.txt')
fullSentCorpus = [ [model.startToken] + [w.lower() for w in sent] + [model.endToken] for sent in myCorpus.sents()]
print('Готово.')

print('Трениране на Марковски езиков модел...')
M2 = model.MarkovModel(fullSentCorpus,2)
print('Готово.')

#### Тест на generate_candidates
assert len(set(a1.generateCandidates("светфно по футбол",M2.kgrams[tuple()]))) == 3, "Броят на генерираните кандидати следва да е 3"
print("Функцията generateCandidates премина теста.")

### Тест на correct_spelling
assert a1.correctSpelling("световно по футбол",M2,1.0) == 'световно по футбол', "Коригираната заявка следва да е 'световно по футбол'"
print("Функцията correctSpelling премина теста.")